require('dotenv').config({ path: '../env.config' });
const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

const API_BASE_URL = 'http://localhost:5002/api';

async function testGetOffers() {
    console.log('\nüîç Test: R√©cup√©ration des offres sp√©ciales');
    try {
        const response = await axios.get(`${API_BASE_URL}/offers`);
        console.log('‚úÖ Succ√®s: Liste des offres r√©cup√©r√©e');
        console.log(`üìä Nombre d'offres: ${response.data.length}`);
        return response.data;
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des offres:', error.message);
        throw error;
    }
}

async function testGetGallery() {
    console.log('\nüîç Test: R√©cup√©ration de la galerie');
    try {
        const response = await axios.get(`${API_BASE_URL}/gallery`);
        console.log('‚úÖ Succ√®s: Galerie r√©cup√©r√©e');
        console.log(`üìä Nombre d'images: ${response.data.length}`);
        return response.data;
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration de la galerie:', error.message);
        throw error;
    }
}

async function testBookOffer(offer) {
    console.log('\nüîç Test: R√©servation d\'une offre sp√©ciale');
    try {
        const bookingData = {
            name: 'Test Client',
            email: 'chok.kane@gmail.com',
            phone: '+1234567890',
            offerTitle: offer.title,
            offerId: offer.id
        };

        console.log('üìù Donn√©es de r√©servation:', bookingData);
        const response = await axios.post(`${API_BASE_URL}/public/book-offer`, bookingData);
        console.log('‚úÖ Succ√®s: R√©servation d\'offre effectu√©e');
        console.log('üìß IDs des emails envoy√©s:', response.data.emailIds);
        return response.data;
    } catch (error) {
        if (error.response) {
            console.error('‚ùå Erreur lors de la r√©servation de l\'offre:', error.response.data.error);
            console.error('üìä Status:', error.response.status);
            console.error('üîç D√©tails:', error.response.data);
        } else {
            console.error('‚ùå Erreur lors de la r√©servation de l\'offre:', error.message);
        }
        throw error;
    }
}

async function testBookFlight() {
    console.log('\nüîç Test: R√©servation d\'un vol');
    try {
        const flightData = {
            name: 'Test Client',
            email: 'chok.kane@gmail.com',
            phone: '+1234567890',
            departure: 'Paris',
            destination: 'Dubai',
            layover: 'Istanbul',
            travelClass: 'Affaires',
            departureDate: '2024-02-01',
            returnDate: '2024-02-15',
            passengers: 2
        };

        const response = await axios.post(`${API_BASE_URL}/public/book-flight`, flightData);
        console.log('‚úÖ Succ√®s: R√©servation de vol effectu√©e');
        console.log('üìß IDs des emails envoy√©s:', response.data.emailIds);
        return response.data;
    } catch (error) {
        if (error.response) {
            console.error('‚ùå Erreur lors de la r√©servation du vol:', error.response.data.error);
            console.error('üìä Status:', error.response.status);
            console.error('üîç D√©tails:', error.response.data);
        } else {
            console.error('‚ùå Erreur lors de la r√©servation du vol:', error.message);
        }
        throw error;
    }
}

async function runAllTests() {
    console.log('üöÄ D√©marrage des tests des fonctionnalit√©s principales');
    try {
        // Test 1: R√©cup√©ration des offres
        const offers = await testGetOffers();
        
        // Test 2: R√©cup√©ration de la galerie
        const gallery = await testGetGallery();
        
        // Test 3: R√©servation d'une offre (si des offres existent)
        if (offers && offers.length > 0) {
            await testBookOffer(offers[0]);
        } else {
            console.log('‚ö†Ô∏è Aucune offre disponible pour tester la r√©servation');
        }
        
        // Test 4: R√©servation d'un vol
        await testBookFlight();

        console.log('\n‚ú® Tous les tests ont √©t√© ex√©cut√©s avec succ√®s!');
    } catch (error) {
        console.error('\n‚ùå Erreur lors de l\'ex√©cution des tests:', error.message);
        process.exit(1);
    }
}

// Ex√©cuter tous les tests
runAllTests();
